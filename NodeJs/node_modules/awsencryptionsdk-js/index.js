const utilsClass = require("./lib/utils");
const DataModel = require("./lib/datamodel");
const reg = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$/
var Utils ;
var masterKeyClass = require("./lib/masterkey"); 

class AWSEncryptionHelper {
    constructor(_privateKey, _encodedMessage) {
      var dt =Date.now();
      if (!_privateKey) {
        throw new Error("Private Key missing")
      }
      this.privateKey = _privateKey;
      if (!_encodedMessage) {
        throw new Error("Data to decrypt is missing")
      }      
      if (reg.test(_encodedMessage)) {
        this.encodedMessage = Buffer.from(_encodedMessage,"base64");
      } else {
        this.encodedMessage = _encodedMessage;
      }      
      
      Utils = new utilsClass(this.encodedMessage); 
      this.messageObject = DataModel.newAWSEncodedObject;
      
    }
    async decrypt() {
        let msgHeader = Utils.deserializeHeader();
        this.messageObject.header = msgHeader;

        let msgBody = Utils.deserializeBody();
        this.messageObject.body = msgBody;

        let msgFooter = Utils.deserializeFooter();
        this.messageObject.footer = msgFooter;

        let MasterKey = new masterKeyClass(this.privateKey,this.messageObject,null);

        var body = await MasterKey.decryptData();
        this.messageObject.body = body;
        
        return this.messageObject;

    }
    getDataKeys() {
        return null;
    }
    setPrivateKey(_privateKey) {
        if (!_privateKey) {
            throw new Error("Private Key missing")
          }
          this.privateKey = _privateKey;
    }
    setEncodedMessage(_encodedMessage){
        if (reg.test(_encodedMessage)) {
            this.encodedMessage = Buffer.from(_encodedMessage,"base64");
          } else {
            this.encodedMessage = _encodedMessage;
          } 
          Utils = new utilsClass(this.encodedMessage); 
          this.messageObject = DataModel.newAWSEncodedObject;          
    }
}


module.exports = AWSEncryptionHelper;

